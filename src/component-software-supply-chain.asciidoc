=  Getting your Ducks in a Row
:title: Getting your Ducks in a Row
:Author:   Manfred Moser, Sonatype, Inc.
:Date: July 2015
:max-width: 45em
:icons:
:copyright: Copyright 2011-present, Sonatype Inc. All Rights Reserved.
:incremental:

== Getting your Ducks in a Row
:incremental!:

image::images/ducks_in_a_row.jpg[scale=100]

An Introduction to Managing Components in your Software Supply Chain

Manfred Moser - http://twitter.com/simpligility[#simpligility] - http://www.simplgility.com[www.simpligility.com]

Sonatype - http://www.sonatype.com[www.sonatype.com]

== What Are You Gonna Learn Today?

* Interesting facts and figures

* A new perspective about your development efforts

* Lots of simple steps for improvements

== Data Sources
:incremental!:

* Central Repository Usage Statistics
** Largest binary repository
** Running for 10+ years
** A.k.a. Maven Central
** Sponsored and managed by Sonatype

* Sonatype Nexus Usage Statistics 
** Most commonly use repository manager
** >50k installations

== Research Reports
:incremental:

* 2011-2014 Open Source Software Development Survey
** >11k responses

* 2015 State of the Software Supply Chain Report 

== How We Develop Today

* Use components as building blocks

* Enjoy power of reuse and collaboration 

* Software stack doesn't matter 

* Open source FTW everywhere! 

== Guess...
:incremental:

What is the percentage of a typical application created by components?

TIP: 80-90%

== Estimate...
:incremental:

How many components can be found in an average application? 

TIP:  > 100 !

== So What is a Component?
:incremental:

____
Frameworks, Libraries, ... Plumbing you don't want to write yourself. Like 
Logging, IoC, persistence layer, ORM, widgets,... 
____

You get them easily by declaring dependencies with Maven, Gradle, nuget, npm... 

== What is a Component?
:incremental!:

Third party AND everything you create

* JARs, WARs, EARs..
* rpm, deb 
* npm, nupkg, gem packages 
* zip, tar.gz files
* installer packages, docker images
* ...

== Software Supply Chain
:incremental!:

Like traditional manufacturing

* Understand complete inventory of product

* Including origin (suppliers)

* And usage 

== Software Supply Chain Management
:incremental:

Components are integrated part of Software Development Life Cycle (SDLC)

It is an endless circle of activities: 

* Research what components to use

* Implement usage of components in development

* Check component usage in QA and release process

* Monitor applications and components used in production

* Go back to the start and change versions or entire components

== So...  
:incremental:

When do software supply chain management efforts stop?

TIP: When all production deployments are turned off!

WARNING:  *Not* when development stops.

== Supply Chain Best Practices
:incremental!:

* Better and fewer suppliers

* Higher quality parts

* Improved visibility and traceability

== Best Practice: Select Projects

TIP: Open source projects are your suppliers!

* Large vs small project
* Active vs inactive in terms of commits
* Foundation backed or stand alone project
* Commercial company backing or not
* Active community support

== Best Practice: Communicate with Suppliers

* Most often open source project
* Report bugs and feature requests
* Help with documentation
* Be present on mailing lists, forums, IRC, ...

== Best Practice: Support Suppliers

* Become a committer
* Sponsor a committer
* Provide infrastructure
* Sponsor foundations
* Pay for support

== Best Practice: Reduce Vendors

Each additional vendor

* Adds integration complexity
* Adds communication channels
* Add need for tracking
* Add new API to learn
* ...

TIP: So having less is easier. 

== Public Repositories as Warehouses/Distributors

Very important in their eco-systems

* JVM - Central Repository - 17B downloads in 2014
** up from 500 M in 2007

* JavaScript/Node - npmjs.org - 15B downloads in 2014

* Ruby - rubygems.org - 5B downloads since inception

* .Net - NuGet Gallery - 300m downloads in 2014

== Example: Central Repository

* approx 1 Million open source components

* approx 11 Million users

* 1000 new components added daily

* exponential growth 

TIP: Growth of other repositories is similar

== Best Practice: Control Component Source

TIP: Run your own local warehouse!

* Reduced bandwidth usage and costs

* Improve performance and stability

* Internal caching and storing of components -> enables collaboration

* Reduced dependency on external repositories

* One component storage location for backup, audit, control...

* Store your own components centrally

-> Use a *repository manager*! 

== Guess

Are people following easily implemented best practice? 
____
TIP: No!
____

* 95% of downloads from Central Repository -> build tools,...

* Only 5% via repo manager

* 18 % of respondents to component survey use *no* repository manager

== Sonatype Nexus as Central Hub

image::images/nexus-tool-suite-integration.png[scale=100]

-> Nexus is a key component of your enterprise development
  infrastructure

== Repository Management with Nexus OSS

* Used by 64% of repository manager users

* Formats include Maven, NuGet, NPM, site, Yum and JRuby/Gems

-> Way better than manual management or ignoring the need

IMPORTANT: Yet easy to implement...

== Step: Know Your Components

* Look at your build

* Crack open the deployment archive

* Identify which checksum search

== Step: Know Their Dependencies

* `mvn dependency:tree` or similar analysis

* Dependency Hierarchy in M2Eclipse or Nexus Pro

TIP: Challenge yourself to produce a Bill of Materials

== Step: Avoid Duplication

* multiple logging frameworks

 
== Step: Reduce Their Numbers

* KISS
* less complexity
* less learning effort

* Application Health Check analysis of 1500+ applications
* 106 components
* 24 with known vulnerabilities
* 9 with restrictive licenses

== Guess... 

How many versions of each library are used at Google? 

TIP: One or two mandated in most cases!

== Step: Upgrade Often

* just like devops - release often
* reduces complexity of updates
* open source projects work on master - latest == best, nearly always, avoid issues easily
* especially regarding security issues, backports are rare!
* sometimes you will get burned with regressions

* Typical component 3-4 releases per year

Average org downloads from Central - top 100 components, 27 are outdated and newer versions exists






WARNING: And you are responsible for *all* components used in your application! 



== Best Practice: Know Component Security Characteristics

tbd

Average org 250k different component downloads per year
15k components with known vulnerabilities downloaded
some of them probably are used in production apps

46 million vulnerable components downloaded in 2014 from Central

16% must prove they are not using known security vulnerabilities

New vulnerabilities found regularly, new releases all the time - yet 63 % do NOT monitor for changes in vulnerability data

How would you know? A PITA to find out

approx 50K components in Central have known security vulnerabilities

OWASP dependency check 

Show in Nexus Pro

== Best Practice: Understand License Implications

63 % have incomplete view of license risk from components

Only 32 % examine all open source components for license compliance

58 % say they are no concerned about license risk

approx 280k components in Central have restrictive licenses
tbd


== Next Steps

* Define policies 

** No components older than 5 years
** No components with know security vulnerabilities of score > 8
** No GPL licensed components

* Only 56 % have policies
* Of these only 68% follow policy
* Often manual, slow
* But 78% say they have never banned a component
* Things dont add up.. 



== Next Steps

* Add tools to automate the process

* Configure tools with policies

== Aim of Tools

1. Empower developers with the right information at the right time

2. Design frictionless, automated approach for continuous DevOps processes

3. Create, manage and monitor component bill of materials for each application

== Bill of Material

* Tracking productions applications BOM
** 40% including dependencies
** 23% NOT including dependencies

== Example Tools

lots of them out there for different stacks, examples to follow

== Maven 

* Dependency Plugin
* Dependency Management
* BOM POM file
* M2e - effective POM view, dependency view
 
== OWASP Dependency Check 

tbd

== Sonatype Nexus Pro

tbd

== Nexus Pro+
In a nutshell:

* Configurable component policies - *very* powerful

* Managed on the Sonatype CLM server

* Tied into Nexus staging

TIP: Demo time!

== Sonatype Nexus Lifecycle

Expands Nexus Pro+

* Manual analysis via web interface upload
 
* Eclipse IDE integration

* Continuous Integration Server Jenkins/Hudson/Bamboo support

* SonarQube support

* Command line scanning

== Resources

* http://www.sonatype.com/about/2014-open-source-software-development-survey[2014 Open Source Software Development Survey Results]

* http://www.sonatype.com/speedbumps[2015 State of the Software Supply Chain Report]

* http://www.slideshare.net/SonatypeCorp[Sonatype slides]

* http://nexus.sonatype.org/nexus[The Nexus Community]

* http://www.sonatype.com/[www.sonatype.com]

* http://links.sonatype.com/products/nexus/oss/docs[Repository Management with Nexus]

* http://www.sonatype.com/assessments/application-health-check[Application Health Check]

* http://www.modulecounts.com/[modulecounts.com]

* http://zeroturnaround.com/rebellabs/java-tools-and-technologies-landscape-for-2014/[Java Tools and Technologies Landscape for 2014]

== Summary

* Your code is only part of your application

* Components are important

* Apply software supply chain thinking

* Easy to start with

* Powerful tools available

TIP: Don't wait!

== The End 

* Questions

* Remarks

* Discussion

* Slides - OSCON site or email manfred@sonatype.com now

== Disclaimers

Image sources:

* https://commons.wikimedia.org/wiki/File:Ducks_in_a_row.jpg[Ducks in a Row from wikimedia]


