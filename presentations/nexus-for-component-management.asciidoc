=  Nexus for Component Management
:title: Sonatype Nexus for Component Management
:Author:   Manfred Moser, Sonatype, Inc.
:Date: September 2014
:max-width: 45em
:icons:
:slidetitleindentcar: 
:copyright: Copyright 2011-2014, Sonatype Inc. All Rights Reserved.

:incremental:

== Nexus for Component Management

Join me on a journey

* from no component manager usage

* to full software development lifecycle integration 

WARNING: Hold on tight. This is going to be a whirlwind trip.

== Nexus for Component Management

We will move ...

* from using unknown jar files

* dependencies not being understood

* and brittle version updates 

to

* enforced policies

* well understood component usage

* avoided security and license issues


== Nexus for Component Management

We will move ...

* from using e.g. jars checked into version control

* or just using Maven, Gradle, ... out of the box

* via Nexus OSS

* to Nexus Professional 

* and onwards to Nexus Professional CLM Edition

* to Sontype CLM with all its tools 

** for IDE, 

** CI 

** and more

== But What About the Top Ten Tips?


[quote, Manfred Moser, Right Here (Right Now)]
____
Don't worry. I got this covered. There will be lots of tips and tricks.
____

== And What About My Questions?

Go right ahead - ask any time. 

But first, let me set the stage...

== So What is a Component?

* All the stuff you use to create your applications 

* The plumbing you don't want to write yourself

* Logging, IoC, persistence layer, ORM, ... 

* And that you get easily by declaring dependencies with Maven,
  Gradle, nuget, npm... 

* Comprises 80-90% of your application

WARNING: And you are responsible for it all. 

== So What is a Component?

* But also all the parts you create and use 

** Including the application deployment packages

* JARs, WARs, EARs..

**  but also rpm and npm packages or tar.gz files

== Development Lifecycle Integration? 

It is an endless circle of activities: 

* Research what components to use

* Implement usage of components in development

* Check component usage in QA and release process

* Monitor applications and components use in production

* Go back to the start and change components and versions

WARNING: It only ends when any production deployments are
decommissioned and NOT when development stops.

== Getting Started - Nexus OSS

* Installation is simple

* Configuration

** conf/nexus.properties

** bin/nexus(.bat)

* Run as a service (JSW)

** bin/jsw/conf/wrapper.conf

TIP:  Let's have a look at these files.

-> It's easy and the benefits are immediate. 

== Repository Concepts

* Proxy and hosted repositories

* Repository groups for easy access/aggregation

* Maven 2, NuGet and NPM  

TIP: We explore all that in the user interface.

== Security

* Privileges, roles and users

* External role mappings e.g. LDAP

* Repository targets

* Authentication from tools 

** settings.xml and more

TIP: Understanding security and possible setups is crucial to control
component usage.

== Search & Component Information

* Different search methods

* Find components in different repositories

* Find available versions - not yet used

** Useful for component selection

* GAV coordinates and repository location

TIP: Demo time! 

== Component Management

'Supply change management for components'

* Security and authentication

* Repositories and repository targets

* Component information

->  Set the stage for first repository and component management

== Component Management

Who can read? 

* other teams (QA, operations)

* remote offices

* contractors, partner companies, public access 

== Component Management

Who can write?

* Build master

* Release engineers

* CI servers

* SNAPSHOTS vs. release

== Component Management

What information is available to whom?

* development

* QA

* security

* legal

* ...

== Component Management with Nexus OSS

* Internal caching and storing of components

* Reduced dependency on external repositories

* One component storage location

* Highly performant

* Efficient search 

* Repository Health Check

* Some meta data

-> Way better than manual management or ignoring the need

IMPORTANT: Yet easy to implement...

== Managing Nexus

* Logging

* Support tools

* Scheduled tasks

* System feeds

* JMX

* External monitoring software

== Nexus Professional - More Information

Lots more component information:

* Archive browser and Maven dependency

* Age & popularity

* Security information

* License Information

* Repository health check with component details

TIP: You gotta see this!

== Nexus Professional - More Security

More security features:

* User token

* Enterprise LDAP, Atlassian Crowd

* SSL management

* Maven settings management

== Scaling Nexus Deployments

* One server

* Bigger server..

* With failover setup

* Multiple server for read, single write

* With load balancer

* With Nexus Professional - Smart proxy

image::images/nexus-smart-proxy.png[scale=100]

== Release Process 

* Security controls write access

* Configurable with repository targets

** Disallow deployments outside company GAV

** Specific GAV's allowed per team

** Or only CI server can deploy

** Or build master

== Release Process 

Dedicated tooling for release process in Nexus Professional - Staging

* Temporary repository

* Rule validation upon deployment

* Configurable for repository targets

* Security controlled stages

* Used as input funnel for Central Repository - OSSRH

TIP: Check out the
http://www.sonatype.com/training/free-nexus-training[free video training course on staging].

== Nexus Professional CLM Edition
In a nutshell:

* Configurable component policies 

* Managed on the Sonatype CLM server

* Tied into Nexus Staging

TIP: Demo time!

== Sonatype CLM

Expands CLM Nexus Professional CLM Edition 

* Manual analysis in CLM server
 
* Eclipse IDE integration

* Continuous Integration Server support

* SonarQube support

* Command line scanning

== Resources

* http://links.sonatype.com/products/nexus/oss/docs[Repository
  Management with Nexus] - free book

* The Nexus Community

** Articles

** Videos

** Mailing Lists

** Monthly Nexus Live 

* Sonatype Support


* http://www.sonatype.org/nexus[Nexus Opens Source OSS website] 

* http://www.sonatype.com/Products/Nexus-Professional[Nexus
  Professional website]

* http://www.sonatype.com/Support/Videos[Screen cast recordings]


* http://www.sonatype.com/nexus/free-trial[Nexus Professional
  Trial Bundle and Guide] - some examples can be used with Nexus OSS as well

* http://www.sonatype.org/nexus/participate[Mailing lists]

* https://links.sonatype.com/products/nexus/community-chat[Talk to the developers/support - HipChat]

* http://www.sonatype.com/Services/Training[Training classes]


////


== "Problems" With Declarative Approach

* Common complaint "Maven is downloading the internet, again!"

* In fact everything is cached locally (~/.m2/repository) 

* Components are used from local repo in *all* your projects built
  with Maven

* Other tools also need to download components, and all use

** Central Repository

** Maven repository format

TIP: This is where Sonatype Nexus can help!



== Sonatype Nexus as Center Hub

image::images/nexus-tool-suite-integration.png[scale=100]

-> Nexus will be a key component of your enterprise development
  infrastructure


== Installing Nexus

. Install Java 7

. Get the bundle with the embedded Jetty server from http://www.sonatype.org/nexus/go[the download
page]

. Extract archive, create symbolic link and run
+
----
sudo cp nexus-professional-x.y.z-bundle.tar.gz /usr/local
cd /usr/local
sudo tar xvzf nexus-professional-x.y.z-bundle.tar.gz
ln -s nexus-professional-x.y.z nexus
cd nexus
./bin/nexus console
----

. Go to http://localhost:8081/nexus and log in with admin/admin123

NOTE: Nexus Professional has enterprise benefits, but open source
edition is perfect for getting started. 




== What is a Repository?

* Organized storage and access container for artifacts

* Uses artifact coordinates for structure

-> A Repository Manager helps with administration and usage

== Repository Manager Tasks

* Proxy and managing access to public repositories

* Storing components that are not in public repositories

* Managing releases and snapshots

* Controlling available and allowed dependencies

* Facilitate internal collaboration across components and teams

== Repository Manager Advantages

* Increased speed

* Reduced bandwidth usage

* Predictability

* Ability to control and audit - all components under your control

* Improved management of 3rd party artifacts

* Internal collaboration enabled

* Distribution of components made possible


== Integrating with Nexus

* Lots of build tools can integrate with Maven repositories 

** Ant/Ivy, Gradle, SBT, Grails, ...

* All functionality is available in REST API

* Java Client for REST API available

* Plugin architecture with examples to create your own


////

