= Introduction to Repository Management and Sonatype Nexus
:author:    Manfred Moser, Sonatype, Inc.
:backend:   slidy
:max-width: 45em
:data-uri:
:icons:
:toc!:
:slidetitleindentcar: 
:copyright: Copyright 2011, Sonatype Inc. All Rights Reserved.


== About Manfred Moser

* Sonatype Trainer for Apache Maven and Sonatype Nexus

* Sonatype Author for books, web site and blog posts

* Author of The Hudson Book

* Open source project manager ksoap2-android, Android Maven Plugin 

* Presenter at various conferences AnDevCon, OSCON, JUC, ... 

* Founder of VIJUG and GDG Victoria BC

* Owner http://www.simpligility.com[simpligility technologies inc.]

== Objectives

* Understand the benefits of using a repository manager

* Know how to start using Nexus

* Learn about Component Lifecycle Management 

* Learn about RDD

== Development Today

Uses components. Lots of them.

-> more than 80% of a common enterprise software 

* Facilitate the power of open source

* Don't reinvent the wheel

A component is any artifact or library that your software needs in
order to be built, released and to run

*Contains* code, class files, object files, binary resources like
images, property files, xml files...

*In* jar, war, ear, swf, so, bin, apk, apklib, zip, tar.gz, rpm, deb files and so on

== Manual Dependency Management

* Painful

* Unreliable

* Overloads SCM

* Hard to maintain and document

== Declarative Dependency Managment

* Automatic

* Including transitive dependencies

* Declarative - so easy to read and understant

* Support from tools

But

* Common complaint "Maven is downloading the internet, again!"

* So are all the other tools, and all use

** Central Repository

** Maven repository format

TIP: This is where Sonatype Nexus can help!

== Adoption Stages and Advantages

* Proxy external repositories

** Starting with Central Repository

** Reduced downloads, faster builds, increased stability

* Host external and internal artifacts

** Deploy once for everybody

** Share binary components like open source projects

** Improve cooperation between multiple, different teams (dev, qa,
   ops...)

* Lifecycle Integration

** Addition of CI server

** Controlling component usage - Procurement

** Improving release process - Staging

* Gaining license and security understanding of the components 

== Sonatype Nexus as Center Hub

image::images/nexus-tool-suite-integration.png[scale=100]

-> Nexus will be a key component of your enterprise development
  infrastructure


== Installing Nexus

. Install Java 6 or Java 7

. Get the bundle with the embedded Jetty server from http://www.sonatype.org/nexus/go[the download
page]

. Extract archive, create symbolic link and run

----
sudo cp nexus-professional-2.1.2-bundle.tar.gz /usr/local
cd /usr/local
sudo tar xvzf nexus-professional-2.1.2-bundle.tar.gz
ln -s nexus-professional-2.1.2 nexus
cd nexus
./bin/nexus console
----
Go to http://localhost:8081/nexus and log in with admin/admin123

NOTE: Nexus Professional has enterprise benefits, but open source
edition is perfect for getting started.

== Relationship Apache Maven and Nexus

Apache Maven introduced repository concept:

* storage for plugins

* and dependencies

All are retrieved from repositories on the internet, by the default
the http://search.maven.org[Central Repository]

* Nexus runs Open Source Repository Hosting OSSRH as input for the Central Repository

* Nexus can run as proxy on site for you

* Best of breed Maven Repository Manager MRM (and beyond)

TIP: Read more about the scale needed to run OSSRH http://www.sonatype.com/people/2012/04/how-can-we-prove-that-nexus-can-scale/[on
the blog.]

== Connecting Maven to Nexus

Establish system/user wide setting for Maven to use Nexus:

* modify/create ~/.m2/settings.xml to point to Nexus (see labs/settings/)

* build a few Maven projects

* see how it starts proxying 

----
<settings>
  <mirrors>
    <mirror>
      <id>nexus</id>
      <mirrorOf>*</mirrorOf>
      <url>http://localhost:8081/nexus/content/groups/public</url>
    </mirror>
  </mirrors>
  <profiles>
    <profile>
      <id>nexus</id>
      <repositories>
        <repository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </repository>
      </repositories>
     <pluginRepositories>
        <pluginRepository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>
      </pluginRepositories>
    </profile>
  </profiles>
  <activeProfiles>
    <activeProfile>nexus</activeProfile>
  </activeProfiles>
</settings>
----

TIP: For other build tools this will be different.

== Component Coordinates

Structure storage for components using unique "GAV" coordinates: 

* *g* roupId, *a* rtifactId, *v* ersion - GAV

* optionally classifier and packaging

----
<dependency>
  <groupId>org.testng</groupId>
  <artifactId>testng</artifactId>
  <version>6.1.1</version>
</dependency>

<dependency>
  <groupId>com.google.inject</groupId>
  <artifactId>guice</artifactId>
  <version>3.0</version>
  <classifier>no_aop</classifier>
</dependency>

<dependency>
  <groupId>org.glassfish.admingui</groupId>
  <artifactId>war</artifactId>
  <version>10.0-b28</version>
  <type>war</type>
</dependency>
----

== Maven Repository Format

Uses the GAV component coordinates. Coordinates map to specific
locations in a Maven repository.

----
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-core</artifactId>
  <version>3.4.1</version>
</dependency>
----

Maps to:

----
org/apache/camel/
                 camel-core/
                            3.4.1/
    camel-core-3.4.1.pom
    camel-core-3.4.1.jar
----

File names are created using

----
artifactId-version-classifier.packaging
----


Classifiers javadoc and sources are appended to file name: 
----
    camel-core-3.4.1-javadoc.jar
    camel-core-3.4.1-sources.jar
----

TIP: Other repository formats use a different structure, but the Maven
structure is understood and used by many tools.

== What is a Repository?

* Organized storage and access container for artifacts

* Uses artifact coordinates for structure

-> A Repository Manager helps with administration and usage

== Repository Manager Tasks

* Proxy and managing access to public repositories

* Storing artifacts that are not in public repositories

* Managing releases and snapshots

* Controlling available and allowed dependencies

* Facilitate internal collaboration across artifacts and teams

== Repository Manager Advantages

* Increased speed

* Reduced bandwidth usage

* Predictability

* Ability to control and audit

* Improved management of 3rd party artifacts

* Internal collaboration enabled

* Distribution of artifacts made possible

* Help preserving a public good by reducing the load on Central

== Nexus User Interface Tour

* Search for components, including advanced search

* View component details

* Repositories

* Server administration

* Security 

== Proxying 

Public Group is exposed to users ->

* can be changed on server for all users

* takes security access rights into account

Examples:

* add an additional external proxy repository

* add an internal hosted repository

* manually deploy component into 3rd party hosted repository

TIP: Demo time!

== Release vs Snapshot Repositories

*Release Repositories*

* Store "point-in-time" Releases

* Releases never change

* Publish a Release -> Both the artifact and meta-data "live forever"

*Snapshot Repositories*

* Used for development-only

* Transient

* No promise SNAPSHOT artifacts will remain the same

== Deploying Internal Components

is when the benefits step up to the next level:

* Sharing of binary components and not specification documents

* No more building each others components

* End of large multi-module builds

* Choice of build system 


== Deployments with Maven...

----
mvn clean deploy
----

* pom.xml -> distributionManagement 

** snapshotRepository

** releaseRepository

* settings.xml -> server

== pom.xml - distributionManagement

----
  <distributionManagement>
    <repository>
      <id>nexus-releases</id>
      <url>http://localhost:8081/nexus/content/repositories/releases</url>
    </repository>
    <snapshotRepository>
      <id>nexus-snapshots</id>
      <url>http://localhost:8081/nexus/content/repositories/snapshots</url>
    </snapshotRepository>
  </distributionManagement>
----

== settings.xml - server

----
  <servers>
    <server>
      <id>nexus-releases</id>
      <username>admin</username>
      <password>admin123</password>
    </server>
    <server>
      <id>nexus-snapshots</id>
      <username>admin</username>
      <password>admin123</password>
    </server>
    <server>
      <id>nexus-site</id>
      <username>admin</username>
      <password>admin123</password>
    </server>
  </servers>
----

== Maven Deploy Plugin

Use the example project in labs/maven-deploy-example

----
mvn clean deploy
mvn versions:set -DnewVersion=1.0.0
mvn clean deploy
----

Snapshot versions can be deployed multiple times.

Releases only once.

Now components are available for everybody via the public group.

TIP: Your continuous integration server could do the deployment.

== Advanced Features

Procurement:: Control availability of components

Staging:: multi-step, controlled release process including reruns

Maven Settings Distribution:: via Nexus Maven Plugin

Other repository formats:: NuGet, Site, P2, OBR, YUM

== Distributed Deployments

Scale your organization, while maintaining performance for everybody! 

image::images/nexus-smart-proxy.png[scale=100]

Various scenarios and setups common including:

* integration with component providers

* cooperation with external development teams

* component distribution to clients

== Repository Driven Development

Move components from one repository to another.

image::images/rdd.png[scale=100]

* select a repository technologies for each stage, that is designed
  for this work

* use tools to move from one to the next

* every omission makes things harder

http://www.simpligility.com/2012/09/you-dont-do-repository-driven-development-yet-where-have-you-been/[Thinking along these lines] of not reimplementing something, where an
existing repository exist can help in every step from source to
production.

WARNING: Can you imagine not using a source code management system?

== Component Lifecycle Management

Component lifecycle management can be defined as the *practice of*

* *analyzing*,
* *controlling*, and 
* *monitoring*

*the components used in your software development lifecycle*.

Sonatype CLM integration in 

* Hudson/Jenkins
* Eclipse
* Nexus
* ...

TIP: Want to see a demo?

== Integrating with Nexus

* Lots of build tools can integrate with Maven repositories 

** Ant/Ivy, Gradle, SBT, Grails, ...

* All functionality is available in REST API

* Plugin architecture with Maven archetypes and samples to create your own

== Want to learn more? 

* http://www.sonatype.org/nexus[Nexus Opens Source OSS website] 

* http://www.sonatype.com/Products/Nexus-Professional[Nexus
  Professional website]

* http://www.sonatype.com/Support/Videos[Screen cast recordings]

* http://links.sonatype.com/products/nexus/oss/docs[Repository Management with Nexus]

* http://www.sonatype.org/nexus/participate[Mailing lists]

* https://links.sonatype.com/products/nexus/community-chat[Talk to the developers/support - HipChat]

* http://www.sonatype.com/Services/Training[Training classes]


