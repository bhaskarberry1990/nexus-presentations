=  Nexus for Component Management
:title: Sonatype Nexus for Component Management
:Author:   Manfred Moser, Sonatype, Inc.
:Date: September 2014
:max-width: 45em
:icons:
:slidetitleindentcar: 
:copyright: Copyright 2011-2014, Sonatype Inc. All Rights Reserved.

:incremental:

== Nexus for Component Management

Join me on a journey

* from no component manager usage

* to full software development lifecycle integration 

WARNING: Hold on tight. This is going to be a whirlwind trip.

== Nexus for Component Management

We will move ...

* from using e.g. jars checked into version control

* or just using Maven, Gradle, ... out of the box

* via Nexus OSS

* to Nexus Professional 

* and onwards to Nexus Professional CLM Edition

* to Sontype CLM with all its tools for IDE, CI and more




== But What About the Top Ten Tips?


[quote, Manfred Moser]
____
Don't worry. I got this covered. There will be lots of tips and tricks.
____

== And What About My Questions?

Go right ahead - ask any time. 

But first, let me set the stage...

== So What is a Component?

* All the stuff you use to create your applications 

* The plumbing you don't want to write yourself

* Logging, IoC, persistence layer, ORM, ... 

* And that you get easily by declaring dependencies with Maven,
  Gradle, nuget, npm... 

* Comprises 80-90% of your application

WARNING: And you are responsible for it all. 

== So What is a Component?

* But also all the parts you create and use 

** Including the application deployment packages

* JARs, WARs, EARs..

**  but also rpm and npm packages or tar.gz files

== Development Lifecycle Integration? 

It is an endless circle of activities: 

* Research what components to use

* Implement usage of components in development

* Check component usage in QA and release process

* Monitor applications and components use in production

* Go back to the start and change components and versions

WARNING: It only ends when any production deployments are
decommissioned and NOT when development stops.

== Getting Started - Nexus OSS

* Installation is simple

* Configuration

** conf/nexus.properties

** bin/nexus(.bat)

* Run as a service (JSW)

** bin/jsw/conf/wrapper.conf

TIP:  Lets have a look at these files.

-> It's easy and the benefits are immediate. 

== Repository Concepts

* Proxy and hosted repositories

* Repository groups for easy access/aggregation

* Maven 2, NuGet and NPM  

TIP: We explore all that in the user interface.

== Security

* Privileges, roles and users

* External role mappings e.g. LDAP

* Repository targets

* Authentication from tools 

** settings.xml and more

== Search & Component Information

:incremental!:  

* Different search methods

* Find components in different repositories

* Find available versions - not yet used

** Useful for component selection

* GAV coordinates and repository location

:incremental!:  

== Component Management

'Supply change management for components'

* Security and authentication

* Repositories and repository targets

* Component information

->  Set the stage for first repository and component management

== Component Management

Who can read? 

* other teams (QA, operations)

* remote offices

* contractors, partner companies, public access 

== Component Management

Who can write?

* Build master

* Release engineers

* CI servers

* SNAPSHOTS vs. release

== Component Management

What information is available to whom?

* development

* QA

* security

* legal

* ...

== Component Management with Nexus OSS

* Internal caching and storing of components

* Reduced dependency on external repositories

* One component storage location

* Highly performant

* Efficient search 

* Repository Health Check

* Some meta data

-> Way better than manual management or ignoring the need

IMPORTANT: Yet easy to implement...

== Managing Nexus

* Logging

* Support tools

* Scheduled tasks

* System feeds

* JMX

* External monitoring software

== Nexus Professional - More Information

Lots more component information:

* Archive browser and Maven dependency

* Age & popularity

* Security information

* License Information

* Repository health check with component details

TIP: You gotta see this!

== Nexus Professional - More Security

More security features:

* User token

* Enterprise LDAP, Atlassian Crowd

* SSL management

== Scaling Nexus Deployments

* One server

* Bigger server..

* With failover setup

* Multiple server for read, single write

* With load balancer

* With Nexus Professional - Smart proxy

== Release Process 

* Security controls write access

* Configurable with repository targets

** Disallow deployments outside company GAV

** Specific GAV's allowed per team

** Or only CI server can deploy

** Or build master

== Release Process 

Dedicated tooling for release process in Nexus Professional - Staging

* Temporary repository

* Rule validation upon deployment

* Configurable for repository targets

* Security controlled stages

* Used as input funnel for Central Repository - OSSRH

TIP: Check out the
http://www.sonatype.com/training/free-nexus-training[free video training course on staging].

== Nexus Professional CLM Edition
In a nutshell:

* Configurable component policies 

* Managed on the Sonatype CLM server

* Tied into Nexus Staging

TIP: Demo time!

== Sonatype CLM

Expands CLM Nexus Professional CLM Edition 

* Manual analysis in CLM server
 
* Eclipse IDE integration

* Continuous Integration Server support

* SonarQube support

* Command line scanning

== Resources

* http://books.sonatype.com/nexus-book/reference/[Repository Management with Nexus]

* The Nexus Community

** Articles

** Videos

** Mailing Lists

** Monthly Nexus Live 

* Sonatype Support

////

- configuring various tools to connect load from Nexus

== Development Today

Uses components. Lots of them.

-> more than 80% of a common enterprise software 

* Facilitate the power of open source

* Don't reinvent the wheel

== But What Is A Component? 

... any artifact or library that your software needs in
order to be built, released and to run

*Contains* code, class files, object files, binary resources like
images, property files, xml files...

*In* jar, war, ear, swf, so, bin, apk, apklib, zip, tar.gz, rpm, deb files and so on

Examples::

* Google Guice jar file needed during runtime

* JUnit jar file needed for unit test execution

* JDBC driver for your database needed at runtime

== Manual Dependency Management

* Painful

* Unreliable

* Overloads SCM

* Hard to maintain and document

NOTE: Unbelievably lots of developers still do this today!

== Declarative Dependency Managment

* Automatic

* Including transitive dependencies

* Declarative - so easy to read and understand

* Support from tools

== "Problems" With Declarative Approach

* Common complaint "Maven is downloading the internet, again!"

* In fact everything is cached locally (~/.m2/repository) 

* Components are used from local repo in *all* your projects built
  with Maven

* Other tools also need to download components, and all use

** Central Repository

** Maven repository format

TIP: This is where Sonatype Nexus can help!

== Adoption Stages and Advantages

Proxy external repositories

* Starting with Central Repository
 
* Reduced downloads, faster builds, increased stability

* Adding more proxy repositories

** only needs to be done on the server

** developers get access to more components without any work

== Adoption Stages and Advantages

Host external and internal artifacts

* Deploy once for everybody

* Share binary components like open source projects

* Improve cooperation between multiple, different teams (dev, qa,
   ops...)

== Adoption Stages and Advantages

Lifecycle Integration

* Addition of CI server

* Controlling component usage - Procurement

* Improving release process - Staging

* Gaining license and security understanding of the components 

== Sonatype Nexus as Center Hub

image::images/nexus-tool-suite-integration.png[scale=100]

-> Nexus will be a key component of your enterprise development
  infrastructure


== Installing Nexus

. Install Java 7

. Get the bundle with the embedded Jetty server from http://www.sonatype.org/nexus/go[the download
page]

. Extract archive, create symbolic link and run
+
----
sudo cp nexus-professional-x.y.z-bundle.tar.gz /usr/local
cd /usr/local
sudo tar xvzf nexus-professional-x.y.z-bundle.tar.gz
ln -s nexus-professional-x.y.z nexus
cd nexus
./bin/nexus console
----

. Go to http://localhost:8081/nexus and log in with admin/admin123

NOTE: Nexus Professional has enterprise benefits, but open source
edition is perfect for getting started. 

== Relationship Apache Maven and Nexus

Apache Maven introduced repository concept:

* storage for plugins

* and dependencies

All are retrieved from repositories on the internet, by the default
the http://search.maven.org[Central Repository]

* Nexus runs Open Source Repository Hosting OSSRH as input for the Central Repository

* Nexus can run as proxy on site for you

* Best of breed Maven Repository Manager MRM (and beyond)

TIP: Read more about the scale needed to run OSSRH http://www.sonatype.com/people/2012/04/how-can-we-prove-that-nexus-can-scale/[on
the blog.]

== Connecting Maven to Nexus

Establish system/user wide setting for Maven to use Nexus:

* modify/create ~/.m2/settings.xml to point to Nexus (see labs/settings/)

* build a few Maven projects

* see how it starts proxying 

----
<settings>
  <mirrors>
    <mirror>
      <id>nexus</id>
      <mirrorOf>*</mirrorOf>
      <url>http://localhost:8081/nexus/content/groups/public</url>
    </mirror>
  </mirrors>
  <profiles>
    <profile>
      <id>nexus</id>
      <repositories>
        <repository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </repository>
      </repositories>
     <pluginRepositories>
        <pluginRepository>
          <id>central</id>
          <url>http://central</url>
          <releases><enabled>true</enabled></releases>
          <snapshots><enabled>true</enabled></snapshots>
        </pluginRepository>
      </pluginRepositories>
    </profile>
  </profiles>
  <activeProfiles>
    <activeProfile>nexus</activeProfile>
  </activeProfiles>
</settings>
----

TIP: For other build tools this will be different.

== Component Coordinates

Structure storage for components using unique "GAV" coordinates: 

* *g* roupId, *a* rtifactId, *v* ersion - GAV

* optionally classifier and packaging

----
<dependency>
  <groupId>org.testng</groupId>
  <artifactId>testng</artifactId>
  <version>6.1.1</version>
</dependency>

<dependency>
  <groupId>com.google.inject</groupId>
  <artifactId>guice</artifactId>
  <version>3.0</version>
  <classifier>no_aop</classifier>
</dependency>

<dependency>
  <groupId>org.glassfish.admingui</groupId>
  <artifactId>war</artifactId>
  <version>10.0-b28</version>
  <type>war</type>
</dependency>
----

== Maven Repository Format

Uses the GAV component coordinates. Coordinates map to specific
locations in a Maven repository.

----
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-core</artifactId>
  <version>3.4.1</version>
</dependency>
----

Maps to:

----
org/apache/camel/
                 camel-core/
                            3.4.1/
    camel-core-3.4.1.pom
    camel-core-3.4.1.jar
----

File names are created using

----
artifactId-version-classifier.packaging
----


Classifiers javadoc and sources are appended to file name: 
----
    camel-core-3.4.1-javadoc.jar
    camel-core-3.4.1-sources.jar
----

TIP: Other repository formats use a different structure, but the Maven
structure is understood and used by many tools.

== What is a Repository?

* Organized storage and access container for artifacts

* Uses artifact coordinates for structure

-> A Repository Manager helps with administration and usage

== Repository Manager Tasks

* Proxy and managing access to public repositories

* Storing components that are not in public repositories

* Managing releases and snapshots

* Controlling available and allowed dependencies

* Facilitate internal collaboration across components and teams

== Repository Manager Advantages

* Increased speed

* Reduced bandwidth usage

* Predictability

* Ability to control and audit - all components under your control

* Improved management of 3rd party artifacts

* Internal collaboration enabled

* Distribution of components made possible

== Nexus User Interface Tour

* Search for components, including advanced search

* View component details including security and license details

* Repositories

* Server administration

* Security 

== Proxying 

Public Group is exposed to users ->

* can be changed on server for all users

* takes security access rights into account

Examples:

* add an additional external proxy repository

* add an internal hosted repository

* manually deploy component into 3rd party hosted repository

TIP: Demo time!

== Release vs Snapshot Repositories

*Release Repositories*

* Store "point-in-time" Releases

* Releases never change

* Publish a Release -> Both the artifact and meta-data "live forever"

*Snapshot Repositories*

* Used for development-only

* Transient

* No promise SNAPSHOT artifacts will remain the same

TIP: Repositiory Groups merge them and expose the all under one URL.

== Deploying Internal Components

is when the benefits step up to the next level:

* Sharing of binary components and not specification documents

* No more building each others components

* End of large multi-module builds

* Choice of build system 


== Deployments with Maven...

----
mvn clean deploy
----

* pom.xml -> distributionManagement 

** snapshotRepository

** releaseRepository

* settings.xml -> server

== pom.xml - distributionManagement

----
  <distributionManagement>
    <repository>
      <id>nexus-releases</id>
      <url>http://localhost:8081/nexus/content/repositories/releases</url>
    </repository>
    <snapshotRepository>
      <id>nexus-snapshots</id>
      <url>http://localhost:8081/nexus/content/repositories/snapshots</url>
    </snapshotRepository>
  </distributionManagement>
----

== settings.xml - server

----
  <servers>
    <server>
      <id>nexus</id>
      <username>admin</username>
      <password>admin123</password>
    </server>
  </servers>
----

== Maven Deploy Plugin

Use the example project in labs/maven-deploy-example

----
mvn clean deploy
mvn versions:set -DnewVersion=1.0.0
mvn clean deploy
----

* Snapshot versions can be deployed multiple times.

* Releases only once.

Now components are available for everybody via the public group.

TIP: Your continuous integration server could do the deployment.

== Advanced Features

Procurement:: Control availability of components

Staging:: multi-step, controlled release process including reruns

Maven Settings Distribution:: via Nexus Maven Plugin

Security:: Enhanced LDAP, Atlassian Crowd

Other repository formats:: NuGet, Site, P2, OBR, YUM

== Distributed Deployments

Scale your organization, while maintaining performance for everybody! 

image::images/nexus-smart-proxy.png[scale=100]

Various scenarios and setups are common,  including:

* integration with component providers

* cooperation with external development teams

* component distribution to clients

== Component Lifecycle Management

Component lifecycle management can be defined as the *practice of*

* *analyzing*,
* *controlling*, and 
* *monitoring*

*the components used in your software development lifecycle*.

Sonatype CLM integration in 

* Hudson/Jenkins
* Eclipse
* Nexus
* ...

== Integrating with Nexus

* Lots of build tools can integrate with Maven repositories 

** Ant/Ivy, Gradle, SBT, Grails, ...

* All functionality is available in REST API

* Java Client for REST API available

* Plugin architecture with examples to create your own

== Want to learn more? 

* http://www.sonatype.org/nexus[Nexus Opens Source OSS website] 

* http://www.sonatype.com/Products/Nexus-Professional[Nexus
  Professional website]

* http://www.sonatype.com/Support/Videos[Screen cast recordings]

* http://links.sonatype.com/products/nexus/oss/docs[Repository
  Management with Nexus] - free book

* http://www.sonatype.com/nexus/free-trial[Nexus Professional
  Trial Bundle and Guide] - some examples can be used with Nexus OSS as well

* http://www.sonatype.org/nexus/participate[Mailing lists]

* https://links.sonatype.com/products/nexus/community-chat[Talk to the developers/support - HipChat]

* http://www.sonatype.com/Services/Training[Training classes]


////

